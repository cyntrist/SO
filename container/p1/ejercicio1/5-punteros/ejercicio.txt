    punteros1.c
        ¿Qué operador utilizamos para declarar una variable como un puntero a otro tipo? *
        ¿Qué operador utilizamos para obtener la dirección de una variable? &
        ¿Qué operador se utiliza para acceder al contenido de la dirección “a la que apunta” un puntero? *
        Hay un error en el código. ¿Se produce en compilación o en ejecución? ¿Por qué se produce? 
        Ejecución. Tras cambiar la posición del puntero en memoria, intenta cambiar el contenido de lo que está apuntando 
        en esa dirección por 13, y falla porque no le corresponde esa memoria al programa muy probablemente ya que las direcciones de memoria
        asignadas a un programa son aleatorias en ejecución, por lo que asignar direcciones arbitrarias suele acabar en error.
    
    punteros2.c
        ¿Cuántos bytes se reservan en memoria con la llamada a malloc()?
        ¿Cuál es la dirección del primer y último byte de dicha zona reservada?
        ¿Por qué el contenido de la dirección apuntada por ptr es 7 y no 5 en el primer printf()?
        ¿Por qué se modfica el contenido de ptr[1] tras la sentencia *ptr2=15;?
        Indica dos modos diferentes de escribir el valor 13 en la dirección correspondiente a ptr[100].
        Hay un error en el código. ¿Se manifiesta en compilación o en ejecución? Aunque no se manifieste, el error está. ¿Cuál es?
    punteros3.c
        ¿Por qué cambia el valor de ptr[13] tras la asignación ptr = &c;?
        El código tiene (al menos) un error. ¿Se manifiesta en compilación o en ejecución? ¿Por qué?
        ¿Qué ocurre con la zona reservada por malloc() tras a asignación ptr = &c;? ¿Cómo se puede acceder a ella? ¿Cómo se puede liberar dicha zona?

